{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2018-04-20T03:51:46.237Z",
    "end": "2018-04-20T03:52:09.848Z",
    "duration": 23611,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Base load generation suite",
        "suites": [
          {
            "title": "The hello world service",
            "suites": [],
            "tests": [
              {
                "title": "should handle large number of requests to an endpoint with variable path elements",
                "fullTitle": "Base load generation suite The hello world service should handle large number of requests to an endpoint with variable path elements",
                "timedOut": false,
                "duration": 23594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const requests = _.range(0, 10000, 1).map(x => `http://localhost:9000/hello-world/${x}`);\n\t    Promise.each(requests, (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t    const options = {\n\t\t\theaders: {\n\t\t\t    \"Content-Type\": \"application/json\",\n\t\t\t}\n\t\t    };\n\t\t    debug(\"Executing request {x}\");\n\t\t    chakram.get(url, options)\n\t\t\t.then(resp => resolve(resp))\n\t\t\t.catch(err => reject(err));\n\t\t});\n\t    }).then(respArr => {\n\t\tcb();\n\t    }).catch(err => {\n\t\tcb(err);\n\t    });",
                "err": {},
                "isRoot": false,
                "uuid": "afbfe8ff-9945-43cd-a230-3aba7aad3ad0",
                "parentUUID": "affe07f5-e49d-4d7b-ac14-dd3abb9e914d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 50000000,
            "file": "/test/load_generator_spec.js",
            "uuid": "affe07f5-e49d-4d7b-ac14-dd3abb9e914d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/gsoertsz/repositories/private/sb-actuator-oom/test-load/test/load_generator_spec.js",
            "passes": [
              {
                "title": "should handle large number of requests to an endpoint with variable path elements",
                "fullTitle": "Base load generation suite The hello world service should handle large number of requests to an endpoint with variable path elements",
                "timedOut": false,
                "duration": 23594,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const requests = _.range(0, 10000, 1).map(x => `http://localhost:9000/hello-world/${x}`);\n\t    Promise.each(requests, (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t    const options = {\n\t\t\theaders: {\n\t\t\t    \"Content-Type\": \"application/json\",\n\t\t\t}\n\t\t    };\n\t\t    debug(\"Executing request {x}\");\n\t\t    chakram.get(url, options)\n\t\t\t.then(resp => resolve(resp))\n\t\t\t.catch(err => reject(err));\n\t\t});\n\t    }).then(respArr => {\n\t\tcb();\n\t    }).catch(err => {\n\t\tcb(err);\n\t    });",
                "err": {},
                "isRoot": false,
                "uuid": "afbfe8ff-9945-43cd-a230-3aba7aad3ad0",
                "parentUUID": "affe07f5-e49d-4d7b-ac14-dd3abb9e914d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 23594,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 50000000,
        "file": "/test/load_generator_spec.js",
        "uuid": "00dd3eb1-0e2f-4502-bc11-466abb967f6f",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/Users/gsoertsz/repositories/private/sb-actuator-oom/test-load/test/load_generator_spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 50000000,
    "uuid": "ef1c3572-642e-47c7-8e27-8d65a72a5e35",
    "beforeHooks": [],
    "afterHooks": [
      {
        "title": "\"after each\" hook",
        "fullTitle": "\"after each\" hook",
        "timedOut": false,
        "duration": 0,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
        "err": {},
        "isRoot": true,
        "uuid": "b1871b98-ede3-427b-bfa8-99280564487b",
        "parentUUID": "ef1c3572-642e-47c7-8e27-8d65a72a5e35",
        "isHook": true,
        "skipped": false
      }
    ],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": true,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should handle large number of requests to an endpoint with variable path elements",
      "fullTitle": "The hello world service should handle large number of requests to an endpoint with variable path elements",
      "timedOut": false,
      "duration": 23594,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const requests = _.range(0, 10000, 1).map(x => `http://localhost:9000/hello-world/${x}`);\n\t    Promise.each(requests, (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t    const options = {\n\t\t\theaders: {\n\t\t\t    \"Content-Type\": \"application/json\",\n\t\t\t}\n\t\t    };\n\t\t    debug(\"Executing request {x}\");\n\t\t    chakram.get(url, options)\n\t\t\t.then(resp => resolve(resp))\n\t\t\t.catch(err => reject(err));\n\t\t});\n\t    }).then(respArr => {\n\t\tcb();\n\t    }).catch(err => {\n\t\tcb(err);\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "afbfe8ff-9945-43cd-a230-3aba7aad3ad0",
      "parentUUID": "affe07f5-e49d-4d7b-ac14-dd3abb9e914d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should handle large number of requests to an endpoint with variable path elements",
      "fullTitle": "The hello world service should handle large number of requests to an endpoint with variable path elements",
      "timedOut": false,
      "duration": 23594,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const requests = _.range(0, 10000, 1).map(x => `http://localhost:9000/hello-world/${x}`);\n\t    Promise.each(requests, (url) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t    const options = {\n\t\t\theaders: {\n\t\t\t    \"Content-Type\": \"application/json\",\n\t\t\t}\n\t\t    };\n\t\t    debug(\"Executing request {x}\");\n\t\t    chakram.get(url, options)\n\t\t\t.then(resp => resolve(resp))\n\t\t\t.catch(err => reject(err));\n\t\t});\n\t    }).then(respArr => {\n\t\tcb();\n\t    }).catch(err => {\n\t\tcb(err);\n\t    });",
      "err": {},
      "isRoot": false,
      "uuid": "afbfe8ff-9945-43cd-a230-3aba7aad3ad0",
      "parentUUID": "affe07f5-e49d-4d7b-ac14-dd3abb9e914d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}